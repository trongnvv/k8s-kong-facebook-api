---
apiVersion: apps/v1
kind: Deployment
metadata:
  # labels:
  #   app: ingress-kong
  name: ingress-kong
  namespace: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-kong
  template:
    metadata:
      annotations:
        prometheus.io/port: "8100"
        prometheus.io/scrape: "true"
        traffic.sidecar.istio.io/includeInboundPorts: ""
        kuma.io/gateway: enabled
      labels:
        app: ingress-kong
    spec:
      serviceAccountName: kong-serviceaccount
      initContainers:
        - name: wait-for-migrations
          image: kong/kong-gateway:2.4.1.0-alpine
          command:
            - "/bin/sh"
            - "-c"
            - "while true; do kong migrations list; if [[ 0 -eq $? ]]; then exit 0; fi; sleep 2;  done;"
          env:
            - name: KONG_PG_HOST
              value: postgres
            - name: KONG_PG_PASSWORD
              value: kong
      containers:
        - name: proxy
          image: kong/kong-gateway:2.4.1.0-alpine
          env:
            # servers
            - name: KONG_PROXY_LISTEN
              value: 0.0.0.0:8000, 0.0.0.0:8443 ssl http2
            - name: KONG_PORT_MAPS
              value: "80:8000, 443:8443"
            - name: KONG_ADMIN_LISTEN
              value: 0.0.0.0:8001, 0.0.0.0:8444 ssl
            - name: KONG_STATUS_LISTEN
              value: 0.0.0.0:8100
            - name: KONG_DATABASE
              value: "postgres"
            - name: KONG_PG_HOST
              value: postgres
            - name: KONG_PG_PASSWORD
              value: kong
              # runtime tweaks
            # - name: KONG_NGINX_WORKER_PROCESSES
            #   value: "2"
            # - name: KONG_ADMIN_GUI_URL
            #   value: http://kong-proxy:8002
            # logging
          # - name: KONG_ADMIN_ACCESS_LOG
          #   value: /dev/stdout
          # - name: KONG_ADMIN_ERROR_LOG
          #   value: /dev/stderr
          # - name: KONG_PROXY_ACCESS_LOG
          # - value: /dev/stdout
          # - name: KONG_PROXY_ERROR_LOG
          #   value: /dev/stderr
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "kong quit"]
          # ports:
          #   - containerPort: 8000
          #     name: proxy
          #     protocol: TCP
          #   - containerPort: 8443
          #     name: proxy-ssl
          #     protocol: TCP
          #   # - containerPort: 8001
          #   #   name: proxy-admin
          #   #   protocol: TCP
          #   - containerPort: 8444
          #     name: proxy-admin-ssl
          #     protocol: TCP
          #   # - containerPort: 8002
          #   #   name: proxy-admin-gui
          #   #   protocol: TCP
          #   - containerPort: 8100
          #     name: metrics
          #     protocol: TCP
          livenessProbe:
            httpGet:
              path: /status
              port: 8100
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /status
              port: 8100
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        - name: ingress-controller
          env:
            - name: CONTROLLER_KONG_ADMIN_URL
              value: "https://127.0.0.1:8444"
            - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
              value: "true"
            - name: CONTROLLER_PUBLISH_SERVICE
              value: "kong/kong-proxy"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: kong/kubernetes-ingress-controller:1.2
          imagePullPolicy: IfNotPresent
          ports:
            - name: webhook
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
